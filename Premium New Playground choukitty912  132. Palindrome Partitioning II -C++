/*
Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

Example:

Input: "aab"
Output: 1
Explanation: The palindrome partitioning ["aa","b"] could be produced using 1 cut.
*/
class Solution {
public:
    int minCut(string s) {
        int len = s.size();
        if (len == 1) return 0;
        vector<int> dp(len+1, 0);
        vector<vector<bool>> p(len, vector<bool>(len,false));
        
        for (int i = 0; i <= len; i++) {
            dp[i] = len - i -1;
        }
        
        for (int i = len-1; i>= 0; i--) {
            for (int j = i; j < len; j++) {
                if ((s[i] == s[j]) && ((j-i<=1) || p[i+1][j-1])) {
                    p[i][j] = true;
                    dp[i] = min(dp[i], dp[j+1]+1);
                }
            }
        }
        
        return dp[0];
    }
};
