/*
Given an array which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.

Note:
If n is the length of array, assume the following constraints are satisfied:

1 ≤ n ≤ 1000
1 ≤ m ≤ min(50, n)
Examples:

Input:
nums = [7,2,5,10,8]
m = 2

Output:
18

Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.
*/
class Solution {
public:
    int splitArray(vector<int>& nums, int m) {
        long left = 0, right = 0;
        for (int i = 0; i < nums.size(); i++) {
            left = max((int)left, nums[i]);
            right += nums[i];
        }
        
        while (left < right) {
            long mid = left + (right - left)/2;
            if (can_split(nums, mid, m)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return right;
    }
    
    bool can_split (vector<int>& nums, long mid, int m) {
        long cur_sum = 0, cnt = 1;
        for (int i = 0 ; i < nums.size(); i++) {
            cur_sum += nums[i];
            if (cur_sum > mid) {
                cur_sum = nums[i];
                cnt++;
                if (cnt > m) {
                    return false;
                }
            }
        }
        return true;
    }
};
