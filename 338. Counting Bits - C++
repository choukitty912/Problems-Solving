/*Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example:
For num = 5 you should return [0,1,1,2,1,2].

Follow up:

It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.
*/
class Solution {
public:
    vector<int> countBits(int num) {
        vector <int> ans;
        if (num == 0 ) {
            ans.push_back(0);
            return ans;
        }
        
        int count = 0, i = 1;
        int temp = num;
        ans.push_back(0);
        ans.push_back(1);
        num = num>>1;
        while (num) {
            num = num>>1;
            if (!num) break;
            int size = ans.size();
            for (int j = 0; j<size; j++) {
                ans.push_back(ans[j]+1);
            }
            i++;          
        }
        for (int j = 0; j<= (temp-(1<<i)); j++) {
            ans.push_back(ans[j]+1);
        }
        return ans;
        
    }
};
