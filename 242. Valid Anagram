/*Given two strings s and t, return true if t is an anagram of s, and false otherwise.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = "anagram", t = "nagaram"
Output: true
Example 2:

Input: s = "rat", t = "car"
Output: false
 

Constraints:

1 <= s.length, t.length <= 5 * 104
s and t consist of lowercase English letters.
 

Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?
*/
class Solution {
public:
    bool isAnagram(string s, string t) {
        vector <int> char_map(26, 0);

        int len_s = s.size();
        int len_t = t.size();

        if (len_s != len_t) return false;

        for (int i = 0 ; i < len_s; i++) {
            char_map[s[i] -'a']++;
        }
        
        for (int i = 0; i < len_t; i++) {
            if ( --char_map[t[i] -'a'] < 0) {
                //cout<< t[i] << " : " << i;
                return false;
            }
            
        }
        return true;
    }
};

class Solution {
public:
    bool isAnagram(string s, string t) {
        if (s.length() != t.length()) {
            return false;
        }
        
        // Initialize a counter array for the 26 lowercase English letters
        int counter[26] = {0};
        
        for (int i = 0; i < s.length(); i++) {
            counter[s[i] - 'a']++;  // Increase the count for the character in s
            counter[t[i] - 'a']--;  // Decrease the count for the character in t
        }
        
        // If the two strings are anagrams, all entries in counter should be 0
        for (int i = 0; i < 26; i++) {
            if (counter[i] != 0) {
                return false;
            }
        }
        
        return true;
    }
};
