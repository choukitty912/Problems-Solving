/*
Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:

All numbers will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]
*/
class Solution {
public:
    vector<vector<int>> combinationSum3(int k, int n) {
         vector<vector<int>> ans;
         vector<int> temp;
         if (n > 45) return ans;
         sum_helper(1, k, n, temp, ans);
         return ans;
    }
    
    void sum_helper(int start, int k, int n, vector <int> &temp, vector<vector<int>> &ans ) {
        if (k == 0) {
            if (n == 0) {
                ans.push_back(temp);
                return;
            }
        }
        
        for (int i = start; i <= 9; i++) {
            if (n-i < 0) return;
            temp.push_back(i);
            sum_helper(i+1, k-1, n-i, temp, ans);
            temp.pop_back();
        }
    }
};
