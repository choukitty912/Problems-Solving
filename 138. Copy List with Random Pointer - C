/*
A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.

*/
/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     struct RandomListNode *next;
 *     struct RandomListNode *random;
 * };
 */
struct RandomListNode *copyRandomList(struct RandomListNode *head) {
    if (!head) return head;
    
    struct RandomListNode *cur = head, *temp = head, *ans;
    
    while(cur) {
        struct RandomListNode *new_node = malloc( sizeof (struct RandomListNode));
        new_node->label = cur->label;
        new_node->random = NULL;
        temp = cur->next;
        cur->next = new_node;       
        new_node->next = temp;        
        cur = temp;        
    }
    
    cur = head;
    //temp = head->next;    
    while (cur) {
         if (cur->random) {
            cur->next->random = cur->random->next;
         }
         cur = cur->next->next;
    }
    
    cur = head;
    ans = head->next;
    //temp = head->next;
    
    while(cur) {
        temp = cur->next;
        cur->next = temp->next;
        if (temp->next) {
            temp->next = temp->next->next;
        }
        cur = cur->next;
    }
    
    return ans;
    
    
}
