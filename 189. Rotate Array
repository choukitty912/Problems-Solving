/*
Given an array, rotate the array to the right by k steps, where k is non-negative.

Example 1:

Input: [1,2,3,4,5,6,7] and k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: [-1,-100,3,99] and k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
*/
class Solution {
public:
    void reverse_array (vector<int>&nums, int start, int end) {
        if (start>=end) return;
        int i = start;
        int j = end;
        while (i < j) {
            swap(nums[i++], nums[j--]);
        }
    }
    
    void rotate(vector<int>& nums, int k) {
        int size = nums.size();
        k = k % size;
        if (size == 0 || k == 0) return;
        
        reverse_array(nums, 0, size-k-1);
        reverse_array(nums, size-k, size-1);
        reverse_array(nums, 0, size-1);
    }
};


class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int size = nums.size()
        if (size == 0) return;
        k = k % size;
        if (k == 0) return;
        
        for (int i = 0 ; i < size; i++) {
            
        }
    }
};
