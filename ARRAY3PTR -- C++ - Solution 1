/* You are given 3 arrays A, B and C. All 3 of the arrays are sorted.

Find i, j, k such that :
max(abs(A[i] - B[j]), abs(B[j] - C[k]), abs(C[k] - A[i])) is minimized.
Return the minimum max(abs(A[i] - B[j]), abs(B[j] - C[k]), abs(C[k] - A[i]))

**abs(x) is absolute value of x and is implemented in the following manner : **
*/

/* each element in a, do binary search for B/C, and record differenc repeat for B/C*/
int bin_search(const vector<int>&A, int number){
    int size = A.size();
    int value;
    int i = 0, j = size-1;
    int mid = 0;
    
    while (i<=j) {
        mid = i + (j - i )/2;
        
        if (A[mid] > number){
            j = mid-1;
        } else if (A[mid] == number){
            return A[mid];
        } else {
            i = mid +1;
        }
    }
    
    if (A[i] > number) { 
        if (i == 0) return A[i];
        if (abs(A[i]-number) > abs(A[i-1]-number)){
            return A[i-1];
        } else {
            return A[i];
        }
    }
    
    if (A[i]<number){
        if (i == size-1) return A[i];
        if (abs(A[i]-number) > abs(A[i+1]-number)){
            return A[i+1];
        } else {
            return A[i];
        }
    }
    
}

int Solution::minimize(const vector<int> &A, const vector<int> &B, const vector<int> &C) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.iinnterviewbit.com/pages/sample_codes/ for more details
    int size_a = A.size();
    int size_b = B.size();
    int size_c = C.size();
    int global_min = INT_MAX;
    
    for (int i = 0; i < size_a; i++) {
        int temp_B = bin_search(B, A[i]);
        int temp_C = bin_search(C, A[i]);
        int cur_max = max(abs(temp_B-A[i]), abs(temp_C-A[i]));
        cur_max = max (abs(temp_B-temp_C),cur_max);
        global_min = min (global_min, cur_max);
    }
    
      for (int i = 0; i < size_b; i++) {
        int temp_a = bin_search(A, B[i]);
        int temp_c = bin_search(C, B[i]);
        int cur_max = max(abs(temp_a-B[i]), abs(temp_c-B[i]));
        cur_max = max (abs(temp_a-temp_c),cur_max);
        global_min = min (global_min, cur_max);
    }
    
      for (int i = 0; i < size_c; i++) {
        int temp_B = bin_search(B, C[i]);
        int temp_A = bin_search(A, C[i]);
        int cur_max = max(abs(temp_B-C[i]), abs(temp_A-C[i]));
        cur_max = max (abs(temp_B-temp_A),cur_max);
        global_min = min (global_min, cur_max);
    }
    
    
    
    return global_min;
}
