/*Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:

Input:
    2
   / \
  1   3
Output: true
Example 2:

    5
   / \
  1   4
     / \
    3   6
Output: false
Explanation: The input is: [5,1,4,null,null,3,6]. The root node's value
             is 5 but its right child's value is 4.
*/

// solution: InOrder Traverse and then compare if it is sorted, if not then not a BST.
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        if(!root) return true;
        vector <int> number;
        
        number = inorder(root);
        
        int size = number.size();
        for (int i = 0; i < size-1; i++) {
            if (number[i] >= number[i+1]) return false;
        }
        return true;
    }
    
    
    vector <int> inorder(TreeNode *root) {
        stack <TreeNode*> s;
        vector <int> num;
        //s.push(root);
        TreeNode *cur = root;
        while (!s.empty()  || cur) {
            if (cur) {
                s.push(cur);
                cur = cur->left;
            } else {
                cur = s.top();
                num.push_back(cur->val);
                //cout<<cur->val<<" ";
                s.pop();
                cur = cur->right;
                
            }
        }
        return num;
        
    }
};
