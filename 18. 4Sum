/*
Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:

The solution set must not contain duplicate quadruplets.

Example:

Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]
*/
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        
        vector<vector<int>> res;
        int length = nums.size();
        if (length == 0) return res;
        
        sort(nums.begin(), nums.end());
        
        if ((nums[0] > 0) || (nums[length-1] < 0)) return res;
        
        for (int i = 0; i < length - 2; i++) {
            if ((i > 0) && (nums[i] == nums[i-1])) continue;
            //if(nums[i] > 0) break;
            for ( int j = i+1; j < length -1 ; j++) {
                if ((j > (i+1)) && (nums[j] == nums[j-1])) continue;
                int endtarget = target - nums[i] - nums[j];
                int k = j+1;
                int l = length -1;
                while (k < l) {
                    
                   
                    if ( endtarget == (nums[k] + nums[l])) {
                        //cout<<"= target ="<<target;
                        res.push_back({nums[i], nums[j], nums[k], nums[l]});
                        //cout <<"Found, "<<nums[i]<<","<< nums[j]<<","<<nums[k]<<","<<nums[l]<<endl;
                        while ((k< l) &&  (nums[k] == nums[k+1])) {
                           k++;
                        }
                        while ((k<l) && (nums[l] == nums[l-1])) {
                            l--;
                        }
                        k++;
                        l--;
                        
                    } else if (endtarget > (nums[k] + nums[l])) {
                       // cout <<"K is small, "<<nums[i]<<","<< nums[j]<<","<<nums[k]<<","<<nums[l]<<endl;
                        k++;  
                         
                    } else {
                      //  cout <<"l is large, "<<nums[i]<<","<< nums[j]<<","<<nums[k]<<","<<nums[l]<<endl;
                        l--;
                         
                         
                    }
                }
                
            }
            
            
        } 
        
        
        return res;
    }
};
