/*
Reverse a linked list from position m to n. Do it in one-pass.

Note: 1 ≤ m ≤ n ≤ length of list.

Example:

Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* reverseBetween(struct ListNode* head, int m, int n) {
    if (!head) return head;
    
    
    struct ListNode *dummy = malloc(sizeof(struct ListNode));
    dummy->next = head;
    head = dummy;

    for ( int i = 0; i < m-1; i++) {
        head = head->next;        
    }
    
    struct ListNode * prev = head, *cur = head->next, *next = NULL, *connect = head->next;

    for (int i = m; i <= n ; i++) {
        next = cur->next;
        cur->next = prev;
        prev = cur;
        cur = next;
    }
    //printf("head->next %d", head->next->val);
    head->next = prev;
    connect->next = cur;
    
    head = dummy->next;
    free(dummy);
    
    return head;
}

