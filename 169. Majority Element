/*
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3
Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2
*/
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        
        int size = nums.size();
        int res = 0;
        for (int i = 0 ; i < sizeof(int) *8 ; i++) {
            int zeros = 0, ones = 0;
            for (int num:nums) {
                if ((zeros > size/2) || (ones > size/2)) {
                    break;
                }
                if (num & (1 <<i)) {
                    ones++;
                } else {
                    zeros++;
                }
            }
            if (ones > zeros) {
                res |= 1<<i;

            }
        }
        return res;
    }
};

// well I dont think the followings are what they are looking for :P
class Solution {
public:
    int majorityElement(vector<int>& nums) {      
        sort(nums.begin(), nums.end());
        return nums[nums.size()/2];
    }
};
