/*
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3
Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2
*/
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        
        int size = nums.size();
        int res = 0;
        for (int i = 0 ; i < sizeof(int) *8 ; i++) {
            int zeros = 0, ones = 0;
            for (int num:nums) {
                if ((zeros > size/2) || (ones > size/2)) {
                    break;
                }
                if (num & (1 <<i)) {
                    ones++;
                } else {
                    zeros++;
                }
            }
            if (ones > zeros) {
                res |= 1<<i;

            }
        }
        return res;
    }
};

// well I dont think the followings are what they are looking for :P
class Solution {
public:
    int majorityElement(vector<int>& nums) {      
        sort(nums.begin(), nums.end());
        return nums[nums.size()/2];
    }
};

/*
The problem you're referring to can be solved using the Boyer-Moore Voting Algorithm. It's an efficient method that works in 
O(n) time and  O(1) space to find the majority element in an array.

Here's the idea behind the algorithm:

We maintain a candidate for the majority element and a count.
As we iterate through the array:
If the count is zero, we set the current element as the candidate.
If the current element equals the candidate, we increment the count.
Otherwise, we decrement the count.
By the end of this process, the candidate will be the majority element.
The reason this works is that the majority element appears more than 
n/2 times, which means there is a surplus of the majority element over any other element.
*/
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        
        int count = 0;
        int candidate = 0;
    
        for (int num : nums) {
            if (count == 0) {
                candidate = num;
            }
        
            count += (num == candidate) ? 1 : -1;
        }

    // Given the problem's constraints, we are sure that the majority element always exists,
    // so there's no need to verify the candidate. 
    // But in a general scenario, you'd make a second pass to verify that the candidate 
    // really is a majority element.

        return candidate;
    }
};
