/*
Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.

Example:

Input: The root of a Binary Search Tree like this:
              5
            /   \
           2     13

Output: The root of a Greater Tree like this:
             18
            /   \
          20     13
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int prev = 0;
    TreeNode* convertBST(TreeNode* root) {
     
        if (!root) return NULL;
        convertBST(root->right);
        root->val += prev;
        prev = root->val;
        convertBST(root->left);
        return root;        
        
    }
    
    /*
    TreeNode* convertBST(TreeNode* root) {
        if (!root) return  NULL;
        stack<TreeNode *> s;
        
        TreeNode *cur = root;
        //s.push(cur);
        int prev = 0;
        
        while (cur || s.empty() == false) {
            if (cur) {
               s.push(cur);
               cur = cur->right;
            } else {
                TreeNode *temp;
                temp = s.top();
                s.pop();
                temp->val += prev;
                prev = temp->val;
                cur = temp->left;
            }
        }
        return root;
        
    }
    */
    /*
    TreeNode* convertBST(TreeNode* root) {
        if (!root) return NULL;
        vector <int> arr;
        unordered_map<int, int> s_map;
        sort_bst(root, arr, s_map);
        helper (root, arr, s_map);
        return root;
    }
    
    void sort_bst (TreeNode* root, vector<int> & arr, unordered_map<int, int> &s_map) {
        if (!root) return;
        sort_bst(root->left,arr,s_map);
        arr.push_back(root->val);
        s_map[root->val] = arr.size()-1;
        sort_bst(root->right,arr,s_map);
    }
    
    void helper(TreeNode* root, vector<int> & arr, unordered_map<int, int> &s_map){
        if (!root) return;
        helper(root->left,arr,s_map);
        root->val += g_sum(arr, s_map, root->val);
        helper(root->right,arr,s_map);
    }
    
    int g_sum(vector<int> & arr, unordered_map<int, int> &s_map, int val) {
        int s = 0;
        for (int i = s_map[val] + 1; i<arr.size();i++) {
            s += arr[i];
        }
        return s;
    }
    */
};
