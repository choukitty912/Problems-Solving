/*
Given a positive 32-bit integer n, you need to find the smallest 32-bit integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive 32-bit integer exists, you need to return -1.

Example 1:

Input: 12
Output: 21
 

Example 2:

Input: 21
Output: -1
*/
class Solution {
public:
    int nextGreaterElement(int n) {
        string num = to_string (n);
        int size = num.size();
        
        int i = size - 1;
       
        while (i >=1 && num[i] <= num[i-1] ) i--;
   
        if ( i == 0) return -1;
        
        int temp = i;
        for (i = size-1; i >= temp; i--){
            if (num[i]> num[temp-1])  break;
        }

        swap (num[i], num[temp-1]);
        sort(num.begin()+temp, num.end());
        
        
        long long  ans;
        ans = stoul(num,nullptr,10);
        if (ans > INT_MAX) return -1;
        return ans;
    }
};
