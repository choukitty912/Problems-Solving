/*
Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
 */
 class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector <int> res;
        unordered_map <int, int> index;
        for (int i = 0 ; i < nums.size(); i++) {
            int temp = target-nums[i];
            if (index.count(temp) == 0) {
                index[nums[i]] = i;
            } else {
                res.push_back(index[temp]);
                res.push_back(i);
                return res;
            }
        }
        return res;
    }
};


std::vector<int> twoSum(std::vector<int>& nums, int target) {
    std::unordered_map<int, int> numIndices;
    std::vector<int> result;

    for (int i = 0; i < nums.size(); ++i) {
        int complement = target - nums[i];

        // Check if the complement exists in the map
        if (numIndices.find(complement) != numIndices.end()) {
            // Found a pair that adds up to the target
            result.push_back(numIndices[complement]); // Index of complement
            result.push_back(i); // Current index
            break;
        }

        // Store the current number and its index in the map
        numIndices[nums[i]] = i;
    }

    return result;
}
