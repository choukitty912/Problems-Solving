/*
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
*/
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        
         int size = nums.size();
        
        vector <int> ans(2,-1);
        
        if (size <=0) return ans;

        int start = 0, end = size-1;
        
        while (start <= end) {
            int mid = start + (end-start)/2;
            if (nums[mid] <= target) start = mid +1;
            if (nums[mid] > target)  end = mid -1;
        }
        ans[1] = end;
        start = 0, end = size-1;
        while (start <= end) {
            int mid = start + (end-start)/2;
            if (nums[mid] < target) start = mid +1;
            if (nums[mid] >= target)  end = mid -1;
        }
        ans[0] = start;
        cout<<ans[0]<<","<<ans[1];
        if (ans[1] >=ans[0]) return ans;
        ans = {-1,-1};
        return ans;
    }
};
