/*
Youâ€™re given a read only array of n integers. Find out if any integer occurs more than n/3 times in the array in linear time and constant additional space.

If so, return the integer. If not, return -1.

If there are multiple solutions, return any one.

Example :

Input : [1 2 3 1 1]
Output : 1 
1 occurs 3 times which is more than 5/3 times. 
*/
int Solution::repeatedNumber(const vector<int> &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print thnt ie output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details

    int a1, a2, count1 = 0 , count2 = 0;
    
    for (int i = 0 ; i < A.size(); i++) {
        if (count1 <=0 && a2 != A[i]) {
            count1 = 1;
            a1 = A[i];
        } else if (count2 <=0 && a1!= A[i]) {
            count2 = 1;
            a2 = A[i];
        } else if (a1 == A[i]){
            count1++;
        } else if (a2 == A[i]) {
            count2++;
        } else {
            count1--;
            count2--;
        }
       //cout<<a1 <<","<<a2 <<"///";
    }
    
    count1 = 0;
    count2 = 0;
    for (int i = 0; i< A.size(); i++) {
        
        
            if (A[i] == a1) count1++;
            if (A[i] == a2) count2++;
            if (count1> A.size()/3) return a1;
            if (count2> A.size()/3) return a2;
        
    }
    
    return -1;
}
