class Solution {
public:
    string addBinary(string a, string b) {
        int size_a = a.size();
        int size_b = b.size();
        
        if (size_a == 0) return b;
        if (size_b == 0) return a;
        
        int i = 1, carry = 0;
        stack <char> ans;
        while (i <= min(size_a, size_b)) {
            int a_temp = a[size_a-i] -'0';
            int b_temp = b[size_b-i] - '0';
            int temp = a_temp^b_temp^carry;
            //carry = a_temp&b_temp | carry& (a_temp ^b_temp);
            carry = a_temp&b_temp | carry&a_temp | carry&b_temp;
            ans.push('0'+temp);
            i++;
        }
        
        while(i <= size_a) {
            int a_temp= a[size_a-i] -'0';
            int temp = a_temp^carry;
            carry = a_temp&carry;
            ans.push('0'+temp);
            i++;
            
        }
        while (i <= size_b) {
            int b_temp= b[size_b-i] -'0';
            int temp = b_temp^carry;
            carry = b_temp&carry;
            ans.push('0'+temp);
            i++;
            
        }
        
        if (carry) ans.push('0'+carry);
        
        string res;
        while (!ans.empty()) {
            res.push_back(ans.top());
            ans.pop();
        }
        
        return res;
        
    }
};

class Solution {
public:
    string addBinary(string a, string b) {
        int len_a = a.size();
        int len_b = b.size();
        string res;

        int i = len_a - 1, j = len_b - 1;
        int carry = 0;
        while (i >= 0 || j >= 0) {
            if (i >=0 && j >= 0) {
                if (a[i] != b[j] ) {
                    if (carry == 0) {
                        res += "1";
                    } else {
                        res += "0";
                        carry = 1;
                    }
                } else if (a[i] == '0') {
                    if (carry == 0) {
                        res += "0";
                    } else {
                        res += "1";
                        carry = 0;
                    }
                } else {
                    if (carry == 0) {
                        res += "0";
                        carry = 1;
                    } else {
                        res += "1";
                        carry = 1;
                    }
                }
                i--;
                j--;
            } else if (i >= 0) {
                if (a[i--] == '0') {
                    if (carry == 0) {
                        res += "0";
                    } else {
                        res += "1";
                        carry = 0;
                    }
                } else {
                    if (carry == 0) {
                        res += "1";
                    } else {
                        res += "0";
                        carry = 1;
                    }
                }
            } else {
                if (b[j--] == '0') {
                    if (carry == 0) {
                        res += "0";
                    } else {
                        res += "1";
                        carry = 0;
                    }
                } else {
                    if (carry == 0) {
                        res += "1";
                    } else {
                        res += "0";
                        carry = 1;
                    }
                }
            }
        }
        if (carry == 1) {
            res += "1";
        }
        reverse(res.begin(), res.end());
        return res;
    }
};
class Solution {
public:
    string addBinary(string a, string b) {
        string result = "";
        
        int i = a.size() - 1;
        int j = b.size() - 1;
        int carry = 0;
        
        while (i >= 0 || j >= 0 || carry == 1) {
            carry += i >= 0 ? a[i--] - '0' : 0;
            carry += j >= 0 ? b[j--] - '0' : 0;
            
            result = char(carry % 2 + '0') + result;
            carry /= 2;
        }
        
        return result;
    }
};
