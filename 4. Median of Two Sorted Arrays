/*
There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
*/
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size();
        int n2 = nums2.size();
        if (n1 < n2) return findMedianSortedArrays(nums2, nums1);
        
        int lo = 0;
        int hi = 2*n2;
        
        while (lo <= hi) {
            int mid2 = lo + (hi-lo)/2;
            int mid1 = n1+n2-mid2;
        
            double l1 = (mid1 == 0 ? INT_MIN : nums1[(mid1-1)/2]);
            double l2 = (mid2 == 0 ? INT_MIN : nums2[(mid2-1)/2]);
            double r1 = (mid1 == 2*n1 ? INT_MAX : nums1[mid1/2]);
            double r2 = (mid2 == 2*n2 ? INT_MAX : nums2[mid2/2]);
          
            if (l1 > r2) {
                lo = mid2+1;
            } else if (l2 > r1) {
                hi = mid2 -1;
            } else {
                
                return ((max(l1, l2) + min (r1, r2))/2);
            }
        }
        return -1;
    }
};
