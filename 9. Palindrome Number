/*
Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.

Example 1:

Input: 121
Output: true
Example 2:

Input: -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
Follow up:

Coud you solve it without converting the integer to a string?
*/
class Solution {
public:
    bool isPalindrome(int x) {
        if (x < 0) return false;
        if (x == 0) return true;
        vector<int> v;
        int count = 0;
        while (x){
            v.push_back(x%10);
            count++;
            x = x/10;
        }
        
        for (int i = 0; i < count/2; i++) {
            if (v[count-i-1] != v[i]) return false;
        }
        
        return true;
        
    }
};
class Solution {
public:
    bool isPalindrome(int x) {
        if (x < 0) return false;
        if (x < 10) return true;

        deque<int> digit;

        while (x > 0) {
            int r = x % 10;
            digit.push_back(r);
            x = x/10;
        } 

        int len = digit.size() / 2;

        for (int i = 0 ; i <= len; i++) {
            if (digit.front() != digit.back()) {
                return false;
            } else {
                digit.pop_front();
                digit.pop_back();
            }
        }
        return true;
        
    }
};

class Solution {
public:
    bool isPalindrome(int x) {
        // Negative numbers are not palindromes, also if the last digit is 0 then the first digit must also be 0, only 0 satisfy this condition
        if(x < 0 || (x % 10 == 0 && x != 0)) {
            return false;
        }
        
        int revertedNumber = 0;
        while(x > revertedNumber) {
            revertedNumber = revertedNumber * 10 + x % 10;
            x /= 10;
        }
        
        // When the length is an odd number, we can get rid of the middle digit by revertedNumber/10
        // For example when the input is 12321, at the end of the while loop we get x = 12, revertedNumber = 123,
        // since the middle digit doesn't matter in palidrome(it will always equal to itself), we can simply get rid of it.
        return x == revertedNumber || x == revertedNumber / 10;
    }
};
