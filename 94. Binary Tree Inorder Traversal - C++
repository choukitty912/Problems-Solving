/*
Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]
Follow up: Recursive solution is trivial, could you do it iteratively?

*/
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        if (!root) return {};
        vector<int> res;
        stack <TreeNode *> s;
        while (root || s.empty() == false) {
            if (root) {
                s.push(root);
                root = root->left;
            } else {
                TreeNode *temp;
                temp = s.top();
                s.pop();
                res.push_back(temp->val);
                root = temp->right;
            }
        } 
        return res;
    }
};
