?*
Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.

Example 1:
Input:

"bbbab"
Output:
4
One possible longest palindromic subsequence is "bbbb".
Example 2:
Input:

"cbbd"
Output:
2
One possible longest palindromic subsequence is "bb".
*/
class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int size = s.size();
        if (size == 0) return 0;
        if (size == 1) return 1;
        vector < vector <int>> sub_seq(size, vector<int>(size,0));
         
        for (int i = size-1 ; i>=0; i--) {
            sub_seq[i][i] = 1;
            for (int j = i+1; j < size ; j++) {
                if (s[i] == s[j]) {
                    sub_seq[i][j] = sub_seq[i+1][j-1] + 2;
                } else {
                    sub_seq[i][j] = max(sub_seq[i][j-1], sub_seq[i+1][j]);
                }
            }
    
       }
       return sub_seq[0][size-1];
    }
};
