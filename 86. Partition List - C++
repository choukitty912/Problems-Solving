/*
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Example:

Input: head = 1->4->3->2->5->2, x = 3
Output: 1->2->2->4->3->5
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        if (!head) return head;
        
        ListNode *dummy_small = new ListNode(-1);
        ListNode *res = dummy_small;
        ListNode *dummy_big = new ListNode (-1);
        ListNode *big = dummy_big;
        
        while (head) {
            if (head->val >=x) {
               dummy_big->next = head;
               dummy_big = dummy_big->next;
            } else {
                dummy_small->next = head;
                dummy_small = dummy_small->next;
            }
            head = head->next;
        }
        dummy_big->next = NULL;
        dummy_small->next = big->next;
        return res->next;
    }
};
