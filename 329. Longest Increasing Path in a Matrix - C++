/*
Given an integer matrix, find the length of the longest increasing path.

From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

Example 1:

Input: nums = 
[
  [9,9,4],
  [6,6,8],
  [2,1,1]
] 
Output: 4 
Explanation: The longest increasing path is [1, 2, 6, 9].
Example 2:

Input: nums = 
[
  [3,4,5],
  [3,2,6],
  [2,2,1]
] 
Output: 4 
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
*/
class Solution {
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int m = matrix.size();
        if (m == 0) return 0;
        int n = matrix[0].size();
        vector<vector<int>> dp(m, vector<int>(n,0));
        int res = 1;//at least u can have a path with one element.
        
        for (int i = 0; i < m; i++) {
            for (int j = 0 ; j < n; j++) {
                res = max(res, helper(dp, matrix, i, j));  
            
            }
        }
        return res;
        
    }
    
    int helper (vector<vector<int>> &dp, vector<vector<int>>& matrix, int i, int j) {
        if (dp[i][j]) return dp[i][j];
        vector<vector<int>> dir = {{0,1},{0,-1},{1,0},{-1,0}};
        int cur_max = 1;
        for (auto a:dir){
            int x = i+a[0], y = j +a[1];
            if (x<0 || y <0 || x>= matrix.size() || y >= matrix[0].size() ) continue;
            if (matrix[x][y]<=matrix[i][j]) continue;
            int length = helper(dp, matrix, x, y)+1; 
            cur_max = max(cur_max, length);
        }
        dp[i][j]= cur_max;
        
        return cur_max;
    }
    
};
