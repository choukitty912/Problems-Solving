/*

A message containing letters from A-Z is being encoded to numbers using the following mapping way:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Beyond that, now the encoded string can also contain the character '*', which can be treated as one of the numbers from 1 to 9.

Given the encoded message containing digits and the character '*', return the total number of ways to decode it.

Also, since the answer may be very large, you should return the output mod 109 + 7.

Example 1:
Input: "*"
Output: 9
Explanation: The encoded message can be decoded to the string: "A", "B", "C", "D", "E", "F", "G", "H", "I".
Example 2:
Input: "1*"
Output: 9 + 9 = 18
Note:
The length of the input string will fit in range [1, 105].
The input string will only contain the character '*' and digits '0' - '9'.
*/
class Solution {
public:
    int numDecodings(string s) {
        long long m = 1e9+7;
        int size = s.size();
        if (size <=0) return 0;
        if (s[0] == '0') return 0;
        
 
        long long e0 = 1, e1 = 0, e2 = 0, f0 = 0;
        
        for (int i = 0 ; i < size; i++) {
           
            if (s[i] == '*') {
                f0 = 9 * e0 + 9 * e1 + 6*e2; /* * can only be 1-9*/
                e1 = e0;
                e2 = e0;
            } else {
                f0 = (s[i] > '0') *e0 +e1 + (s[i]<'7')*e2;
                e1 = (s[i] == '1') *e0;
                e2 = (s[i] == '2') *e0;
            }
            e0 = f0%m;          
        }

        return e0;
    }
};
