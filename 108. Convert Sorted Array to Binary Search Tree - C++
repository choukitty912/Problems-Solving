/*
Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted array: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5
 */
 class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        int size = nums.size();
        if (size == 0) return NULL;
        if (size == 1) {
            TreeNode *t = new TreeNode(nums[0]);
            return t;
        }
        
        int count = size;
        TreeNode *root; 
        
        root = new TreeNode(nums[count/2]);
        vector<int> l_array, r_array;
        l_array.insert(l_array.begin(),nums.begin(), nums.begin()+count/2);
        r_array.insert(r_array.begin(),nums.begin()+count/2+1, nums.end());
        root->left = sortedArrayToBST(l_array);
        root->right = sortedArrayToBST(r_array);

        return root;
    }
};
#include <iostream>
#include <vector>
#include <queue>

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

TreeNode* sortedArrayToBST(std::vector<int>& nums) {
    // Check if the input vector is empty
    if (nums.empty()) {
        return nullptr;
    }

    // Find the middle element of the sorted array
    int mid = nums.size() / 2;

    // Create a new TreeNode with the middle element as the root
    TreeNode* root = new TreeNode(nums[mid]);

    // Recursively construct the left and right subtrees
    std::vector<int> leftSubArray(nums.begin(), nums.begin() + mid);
    std::vector<int> rightSubArray(nums.begin() + mid + 1, nums.end());

    root->left = sortedArrayToBST(leftSubArray);
    root->right = sortedArrayToBST(rightSubArray);

    return root;
}

// Function to print the inorder traversal of a binary tree (for verification)
void inorderTraversal(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    inorderTraversal(root->left);
    std::cout << root->val << " ";
    inorderTraversal(root->right);
}

int main() {
    std::vector<int> nums = {-10, -3, 0, 5, 9};
    
    // Convert the sorted array to a BST
    TreeNode* root = sortedArrayToBST(nums);
    
    // Print the inorder traversal of the BST (to verify the result)
    inorderTraversal(root);
    
    return 0;
}
