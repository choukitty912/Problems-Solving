/*
Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted array: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5
 */
 class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        int size = nums.size();
        if (size == 0) return NULL;
        if (size == 1) {
            TreeNode *t = new TreeNode(nums[0]);
            return t;
        }
        
        int count = size;
        TreeNode *root; 
        
        root = new TreeNode(nums[count/2]);
        vector<int> l_array, r_array;
        l_array.insert(l_array.begin(),nums.begin(), nums.begin()+count/2);
        r_array.insert(r_array.begin(),nums.begin()+count/2+1, nums.end());
        root->left = sortedArrayToBST(l_array);
        root->right = sortedArrayToBST(r_array);

        return root;
    }
};
