/*Given a singly linked list, determine if it is a palindrome.

Example 1:

Input: 1->2
Output: false
Example 2:

Input: 1->2->2->1
Output: true
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* reverse_list(struct ListNode* head) {
    if (!head || !head->next) return head;
    struct ListNode *prev = NULL, *cur=head, *next= NULL;
    while(cur) {       
        next = cur->next;
        cur->next = prev;
        prev = cur;
        cur = next;
    }
    return prev;

}

bool isPalindrome(struct ListNode* head) {
    if (!head || !head->next) return true;
    
    struct ListNode *slow = head, *fast = head;
    
    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
    }
    //Fast not null means odd
    if (fast) slow = slow->next;
    
    slow = reverse_list(slow);
    
    while(slow){
        if (slow->val != head->val) return false;
        slow = slow->next;
        head = head->next;
    }
    return true;
}
