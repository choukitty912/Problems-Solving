/*
Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

 

Example 1:


Input: root = [1,2,2,3,4,4,3]
Output: true
Example 2:


Input: root = [1,2,2,null,3,null,3]
Output: false
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
-100 <= Node.val <= 100
 

Follow up: Could you solve it both recursively and iteratively?
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    bool isSame(TreeNode* t1, TreeNode*t2) {
        if (!t1 && !t2) return true;
        if (!t1 || !t2 || t1->val != t2->val) return false;
        return (isSame(t1->left, t2->right) && isSame(t1->right, t2->left));
    }
    bool isSymmetric(TreeNode* root) {
        if (!root) return true;
        return (isSame(root->left, root->right));       
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if (!root) return true;
        
        std::queue<TreeNode*> queue;
        queue.push(root->left);
        queue.push(root->right);
        
        while (!queue.empty()) {
            TreeNode* node1 = queue.front(); queue.pop();
            TreeNode* node2 = queue.front(); queue.pop();
            
            // Both nodes are null, continue to next pair
            if (!node1 && !node2) continue;
            
            // One of the nodes is null, or the values are not equal - not symmetric
            if (!node1 || !node2 || node1->val != node2->val) return false;
            
            // Insert the children of the two nodes in the queue in opposite order
            queue.push(node1->left);
            queue.push(node2->right);
            queue.push(node1->right);
            queue.push(node2->left);
        }
        
        return true;
    }
};
