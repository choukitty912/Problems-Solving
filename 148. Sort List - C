/*Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* merge_sort(struct ListNode* l1, struct ListNode* l2){
     if (!l1) return l2;
     if (!l2) return l1;
     
    if (l1->val < l2->val) {
        l1->next = merge_sort(l1->next, l2);
        return l1;
    } else {
        l2->next = merge_sort(l2->next, l1);
        return l2;
    }
    
}
    
 

struct ListNode* sortList(struct ListNode* head) {
    if (! head || !head->next) return head;
    
    struct ListNode *slow = head, *fast = head, *prev = head;
    
    while(fast && fast->next) {
        prev = slow;
        slow = slow->next;
        fast = fast->next->next;        
    }   
    prev->next = NULL;
    
    return merge_sort(sortList(head), sortList(slow));
    
    
}
