/*
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]
*/
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<vector<int>> ans;
        vector<int> temp;
        helper(root, sum, ans, temp);
        return ans;
    }
    
    void helper(TreeNode*root, int sum, vector<vector<int>> &res, vector <int> &temp) {
        if (!root) return;
        temp.push_back(root->val);
        if (!root->left && !root->right) {
            if (root->val == sum) {         
                res.push_back(temp);
            } 
        }       
       helper(root->left, sum-root->val, res, temp);
       helper(root->right, sum-root->val, res, temp);
       temp.pop_back();
    }
};
