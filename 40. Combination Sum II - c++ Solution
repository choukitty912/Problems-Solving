/*
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5,
A solution set is:
[
  [1,2,2],
  [5]
]
*/
class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        int size = candidates.size();
        vector <vector <int>> res;
        if (size == 0 ) return res;
        vector <int> temp;
        sort(candidates.begin(), candidates.end());
        sum_helper(candidates, target, 0, temp, res);
        return res;
    }
    
    void sum_helper(vector <int> & candidates, int target, int start, vector<int> & temp, vector<vector<int>> &res) {
        if (target == 0) {
            res.push_back(temp);
            return;
        }
        
        for (int i = start; i < candidates.size(); i++) {
            if ( i > start && candidates[i] == candidates[i-1]) continue;
            if ((target-candidates[i] )< 0) return;
            temp.push_back(candidates[i]);
            sum_helper(candidates, target-candidates[i], i+1, temp, res);
            temp.pop_back();
        }
    }
};
