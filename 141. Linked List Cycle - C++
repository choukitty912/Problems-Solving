/*

Given a linked list, determine if it has a cycle in it.
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if (!head) return false;
        if (!head->next) return false;
        
        ListNode *fast = head, *slow = head;
        
        while(fast && fast->next && slow) {
            fast = fast->next->next;
            slow = slow->next;
            if (fast == slow) return true;
        }
        return false;
    }
};

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if (!head || !head->next) {
            return false;
        }

        ListNode *slow = head;       // Moves one step at a time
        ListNode *fast = head->next; // Moves two steps at a time

        while (slow != fast) {
            if (!fast || !fast->next) {
                return false; // If the fast pointer encounters a null, that means there is no cycle.
            }
            slow = slow->next;
            fast = fast->next->next;
        }

        return true; // If slow and fast meet, there is a cycle in the list.
    }
};

