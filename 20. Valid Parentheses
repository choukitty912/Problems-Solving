/*
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

Example 1:

Input: "()"
Output: true
Example 2:

Input: "()[]{}"
Output: true
Example 3:

Input: "(]"
Output: false
Example 4:

Input: "([)]"
Output: false
Example 5:

Input: "{[]}"
Output: true
*/
class Solution {
public:
    bool isValid(string s) {
        int size = s.size();
        stack <char> st;
        for (int i = 0; i < size; i++ ) {
            if (s[i] == '{' ||
                s[i] == '(' ||
                s[i] == '[') {
                st.push(s[i]);
            } else {
                if (st.size() == 0) return false;
                if (s[i] == '}' && st.top() == '{') {
                    st.pop();
                    continue;
                } 
                if (s[i] == ']' && st.top() == '[') {
                    st.pop();
                    continue;
                } 
                if (s[i] == ')' && st.top() == '(') {
                    st.pop();
                    continue;
                }
                return false;
            }
        }
        
        if (st.size() == 0) return true;
        return false;
    }
};

#include <stack>
#include <unordered_map>

class Solution {
public:
    bool isValid(string s) {
        std::stack<char> stack;
        std::unordered_map<char, char> mapping = {{')', '('}, {']', '['}, {'}', '{'}};
        for (char c : s) {
            // If the current character is a closing bracket.
            if (mapping.count(c)) {
                // Get the top element of the stack. If the stack is empty, set a dummy value of '#'
                char top_element = stack.empty() ? '#' : stack.top();
                // If the stack is not empty, pop the top element.
                if (!stack.empty()) {
                    stack.pop();
                }
                // If the mapping for the current bracket doesn't match the stack's top element, return false.
                if (top_element != mapping[c]) {
                    return false;
                }
            } else {
                // If it was an opening bracket, push to the stack.
                stack.push(c);
            }
        }
        // If the stack still contains elements, then it is an invalid expression.
        return stack.empty();
    }
};
