/*
Given an integer n, return the number of trailing zeroes in n!.

Note that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.

 

Example 1:

Input: n = 3
Output: 0
Explanation: 3! = 6, no trailing zero.
Example 2:

Input: n = 5
Output: 1
Explanation: 5! = 120, one trailing zero.
Example 3:

Input: n = 0
Output: 0
 

Constraints:

0 <= n <= 104
*/
class Solution {
public:
    int numberofN(int n, int m) {
        if (n == 0 ) return 0;
        int count = 0;; 
        while (n > 0 && n % m == 0) {
            count++;
            n = n / m;
        }
        return count;
    }

    int trailingZeroes(int n) {
        int count = 0;
        if (n == 0) return 0;
        for (int i = 1; i <= n; i++) {
            if ( i % 5 == 0 ) {
                count += numberofN(i, 5);
            } 
        }
        return count;

    }
};

#include <iostream>

class Solution {
public:
    int trailingZeroes(int n) {
        int count = 0;
        for (long long i = 5; n / i > 0; i *= 5) {
            count += n / i;
        }
        return count;
    }
};

int main() {
    Solution sol;
    std::cout << "Trailing zeroes in 5!: " << sol.trailingZeroes(5) << std::endl;   // Output: 1
    std::cout << "Trailing zeroes in 10!: " << sol.trailingZeroes(10) << std::endl; // Output: 2
    std::cout << "Trailing zeroes in 25!: " << sol.trailingZeroes(25) << std::endl; // Output: 6
    return 0;
}
