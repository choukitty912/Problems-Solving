/*
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
 

Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)
*/
/*
Create two arrays, left and right:

left[i] contains the product of all the elements to the left of i.
right[i] contains the product of all the elements to the right of i.
Initialize left[0] and right[n-1] to 1, since there are no elements to the left of the first element and to the right of the last element.

Fill the left and right arrays:

For left, iterate from the second element to the end, updating left[i] = left[i-1] * nums[i-1].
For right, iterate from the second-to-last element to the beginning, updating right[i] = right[i+1] * nums[i+1].
Calculate the result:

For each i, output[i] = left[i] * right[i].
*/

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int len = nums.size();
        vector<int> left(len, 1), right(len, 1), res(len);

        for (int i = 1; i < len; i++) {
            left[i] = left[i - 1] * nums[i - 1];
            right[len - i - 1] = right [len - i] * nums[len - i];
        }

        for (int i = 0; i < len; i++) {
            res[i] = left[i] * right[i];
        }
        
        return res;
    }
};
