/*
Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.

Note: For the purpose of this problem, we define empty string as valid palindrome.

Example 1:

Input: "A man, a plan, a canal: Panama"
Output: true
Example 2:

Input: "race a car"
Output: false
*/
class Solution {
public:
    bool isPalindrome(string s) {
        int size = s.size();
        if (size <= 1) return true;
        int start = 0, end = size -1;
        while(start <= end) {
            int t1 = check_charcter(s[start]);
            int t2 = check_charcter(s[end]);
            //cout<<start<<" "<<t1<<","<<s[end]<<","<<t2<<endl;
            if (t1 != -1 && t2 !=-1) {
                if (t1 == t2) {
                    start++;
                    end--;
                } else {
                    return false;
                }
            } else if (t1 == -1) {
                start++;
            } else {
                end--;
            }
        }
        return true;
    }
    int check_charcter(char c) {
        if ( c<= 'z' && c>='a') return c-'a'+'A';
        if ( c<= 'Z' && c>='A') return c;
        if ( c<= '9' && c>='0') return c;
        return -1;
    }
};

class Solution {
public:
    bool isAlphanumeric (char c) {
        if (( c >= 'a' && c <='z') || (c >='A' && c <= 'Z') || (c >='0' && c <='9')) {
           return true;
        } 
        return false;
    } 

    bool isSame (char c1, char c2) {
        if (c1 >='0' && c1 <='9') {
            if (c1 == c2) {
                return true;
            }
            return false ;
        } else if ((c1 == c2) || (abs(c1 - c2) == 32)) {
            return true;
        } else {
            return false;
        }

    }

    bool isPalindrome(string s) {
        int len = s.size();
        int i = 0, j = len - 1;
        while (i < j) {
            if (!isAlphanumeric(s[i])) {
                i++;
                continue;
            }
            if (!isAlphanumeric(s[j])) {
                j--;
                continue;
            }
            //cout << s[i] << " : " << s[j] << "\n";
            if (!isSame(s[i], s[j])) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
};
lass Solution {
public:
    bool isPalindrome(string s) {
        int left = 0, right = s.length() - 1;
        
        while (left < right) {
            // Skip non-alphanumeric characters from the left
            while (left < right && !isalnum(s[left])) left++;
            
            // Skip non-alphanumeric characters from the right
            while (left < right && !isalnum(s[right])) right--;
            
            // Compare the characters, ignoring case
            if (tolower(s[left]) != tolower(s[right])) return false;
            
            left++;
            right--;
        }
        
        return true;
    }
};
