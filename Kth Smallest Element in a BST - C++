/*
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note: 
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1
Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3
Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?
*/
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        if (!root) return 0;
        vector <int> inorder;
        bst_sorted(root, inorder);
        return(inorder[k-1]);
    }
private:
    
    void bst_sorted(TreeNode *root, vector <int> &inorder) {
        if (!root) return;
        bst_sorted(root->left,inorder);
        inorder.push_back(root->val);
        bst_sorted(root->right,inorder);
    }
};
