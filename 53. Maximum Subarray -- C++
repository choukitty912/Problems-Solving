/*
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

*/

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int sum = 0, max_sum = INT_MIN;
        for (int i = 0 ; i < nums.size(); i++) {
            sum = max(sum+nums[i], nums[i]);
            max_sum = max(sum, max_sum);
        }
        return max_sum;
    }
 }

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
       
        if (nums.size() <= 0) return 0;
        int res = helper_max(nums, 0, nums.size()-1);
        return res;
    }
    
    int helper_max(vector <int> &nums,int start, int end) {
        if (start >= end) return nums[start];
        int mid = start + (end - start)/2;
        int lmax = helper_max(nums, start, mid-1);
        int rmax = helper_max(nums, mid+1, end);
        int mmax = nums[mid];
        
        int t = mmax;
        for (int i = mid - 1; i >= start; i--) {
            t += nums[i];
            mmax= max(t, mmax);
        }
        t = mmax;
        for (int i = mid+1; i <= end; i++) {
            t +=nums[i];
            mmax= max(t, mmax);
        }
        //cout<<mmax<<endl;
        return max(mmax, max(lmax,rmax));
    }
    
};
