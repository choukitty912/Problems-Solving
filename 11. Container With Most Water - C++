/*
Given n non-negative integers a1, a2, ..., an,
where each represents a point at coordinate (i, ai).
'n' vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0).

Find two lines, which together with x-axis forms a container, such that the container contains the most water.

Your program should return an integer which corresponds to the maximum area of water that can be contained ( Yes, we know maximum area instead of maximum volume sounds weird. But this is 2D plane we are working with for simplicity ).
*/

/* two pointers from left and right*/

int Solution::maxArea(vector<int> &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    int size = A.size();
    if (size<=1) return 0;
    
    int global_max  = INT_MIN;
    
    int left = 0, right = size-1;
    
    while (left < right) {
        int cur_max = (right-left) * min ( A[left], A[right]);
        global_max = max(global_max, cur_max);
        if (A[left] < A[right]) {
            left++;
        } else {
            right--;
        }
    }
    return global_max;
}
