/*
Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
*/
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        string res = "";

        string temp = "";
        for (int i = 0; i < s.size(); i++) {
            size_t pos = temp.find(s[i]);
            if (pos == std::string::npos) {
                temp += s[i];
                //cout << "temp: "<< temp << endl; 
            } else {
                if (res.size() < temp.size()) {
                    res = temp;
                }
                temp = temp.substr(pos + 1) + s[i];
                //cout << temp << endl; 
            }
        }
        if (res.size() < temp.size()) {
                    res = temp;
        }
        //cout << "Result : " << res << endl;
        return res.size();
    }
};

#include <string>
#include <unordered_map>
#include <algorithm>

using namespace std;

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_map<char, int> charMap; // Map to store the last positions of characters
        int maxLength = 0; // The length of the longest substring without repeating characters
        int start = 0; // Start index of the current substring

        for (int end = 0; end < s.length(); end++) {
            char currentChar = s[end];
            
            // If the character is already in the map and its last position is on or after the start of the current substring
            if (charMap.find(currentChar) != charMap.end() && charMap[currentChar] >= start) {
                start = charMap[currentChar] + 1; // Move the start right after this character's last position
            }

            charMap[currentChar] = end; // Update the last position of the character
            maxLength = max(maxLength, end - start + 1); // Update the max length if necessary
        }

        return maxLength;
    }
};
