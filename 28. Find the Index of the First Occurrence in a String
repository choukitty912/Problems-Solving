/*
Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

 

Example 1:

Input: haystack = "sadbutsad", needle = "sad"
Output: 0
Explanation: "sad" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.
Example 2:

Input: haystack = "leetcode", needle = "leeto"
Output: -1
Explanation: "leeto" did not occur in "leetcode", so we return -1.
 

Constraints:

1 <= haystack.length, needle.length <= 104
haystack and needle consist of only lowercase English characters.
*/

class Solution {
public:
    int strStr(string haystack, string needle) {
        int len_h = haystack.size();
        int len_n = needle.size();
        if (len_h < len_n) return -1;

        for (int i = 0 ; i < len_h - len_n + 1; i++) {
            if (haystack.substr(i, len_n) == needle) {
                return i ;
            }
        } 
        return -1;
    }
};
int strStr(std::string haystack, std::string needle) {
    int haystackLen = haystack.length();
    int needleLen = needle.length();

    // Handle edge cases
    if (needleLen == 0) {
        return 0; // Empty needle is always found at the beginning.
    }
    
    if (haystackLen < needleLen) {
        return -1; // Needle cannot be longer than haystack.
    }

    for (int i = 0; i <= haystackLen - needleLen; ++i) {
        int j = 0;

        // Check for needle match starting at position i
        while (j < needleLen && haystack[i + j] == needle[j]) {
            j++;
        }

        if (j == needleLen) {
            return i; // Found a match
        }
    }

    return -1; // No match found
}
