/*
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

The cache is initialized with a positive capacity.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4
*/
class LRUCache {
public:
    LRUCache(int capacity) {
        MaxSize = capacity;
        tail = NULL;
        head = NULL;
        map.clear();
    }
    
    int get(int key) {
        if (map.count(key) == 0) return -1;
        MoveToTail(map[key]);
        return map[key]->value;
        
    }
    
    void put(int key, int value) {
       if (get(key) != -1) {
           map[key]->value = value;
           return;
       }
        
       if (isFull()) {
           DeleteHead();
       } 
       InsertTail(key,value);
        
    }
    
    bool isFull(void) {
        if (map.size() >= MaxSize) return true;
        return false;
    }
private:
    struct ListNode {
        int value;
        int key;
        ListNode *next;
        ListNode *prev;
        ListNode(int x, int y): value(x), key(y){}
    };
    
    int MaxSize;
    ListNode *tail, *head;
    unordered_map <int, ListNode *> map;
    
    
    void DeleteHead(void) {
        if (!head) return;
        map.erase(head->key);
        ListNode *temp;
        temp = head;
        if (head == tail) {
            head = NULL;
            tail = NULL;
        } else {
            head = head->next;
            head->prev = NULL;
        }
        delete temp;
    }
    
    void InsertTail(int key, int val) {
        ListNode* temp = new ListNode(val,key);
        if (head == NULL) {
            head = temp;
            head->next = NULL;
            head->prev = NULL;
            tail = head;
        } else {
            tail->next = temp;
            temp->prev = tail;
            temp->next = NULL;
            tail = temp;
        }
        map[key] = tail;
    }
    
    void MoveToTail(ListNode *node) {
        if (tail == node) return;
        ListNode *temp;
        temp = node;
        if (head == node ){
            head = head->next;
            head->prev = NULL;
        } else {
            node->prev->next = node->next;
            node->next->prev = node->prev;
        }
        
        tail->next = temp;
        temp->prev = tail;
        temp->next = NULL;
        tail = temp;
        
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
