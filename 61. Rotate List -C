/*
Given a linked list, rotate the list to the right by k places, where k is non-negative.

Example 1:

Input: 1->2->3->4->5->NULL, k = 2
Output: 4->5->1->2->3->NULL
Explanation:
rotate 1 steps to the right: 5->1->2->3->4->NULL
rotate 2 steps to the right: 4->5->1->2->3->NULL
Example 2:

Input: 0->1->2->NULL, k = 4
Output: 2->0->1->NULL
Explanation:
rotate 1 steps to the right: 2->0->1->NULL
rotate 2 steps to the right: 1->2->0->NULL
rotate 3 steps to the right: 0->1->2->NULL
rotate 4 steps to the right: 2->0->1->NULL
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* rotateRight(struct ListNode* head, int k) {
    if (!head || !head->next) return head; 
    
    struct ListNode *slow = head, *fast = head, *rotate_head, *prev = head, * cur = head;
    int count = 0;
    while (cur) {
        count++;
        cur = cur->next;
    }
    k = k%count;
    count = 0;
    if (k==0) return head;
    while(fast) {
        if (count > k) {
            slow = slow->next;
        }
        prev = fast;
        fast = fast->next;
        count++;
    }
    rotate_head = slow->next;
    slow->next = NULL;
    prev->next = head;
    return rotate_head;
}
