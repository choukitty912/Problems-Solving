/*
You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].

Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:

0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [2,3,0,1,4]
Output: 2
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 1000
It's guaranteed that you can reach nums[n - 1].
*/
class Solution {
public:
    int jump(vector<int>& nums) {
        int size = nums.size();
        if (size < 2) return 0;
        int number_of_jumps = 0;
        int current_jump_end = 0;
        int maxReach = 0;
// note here it is size - 1 not size
/*
If we are at the last element of the array, we've already calculated the number of jumps required to get there. There's no need to consider jumping from it, because our goal is to reach the last index, not to jump from it.

If we reach a situation where current_jump_end is the last index or beyond in the loop, then we are done. The loop will finish executing for all indices up to the end but not including the last index.

Including the last index in the loop (i.e., making the loop condition i < n) would unnecessarily increase the jumps count since at the last index, i would be equal to current_jump_end, and jumps would be incremented incorrectly.

*/
        for (int i = 0; i < size - 1; i++){
             maxReach = max(maxReach, i + nums[i]);
             
             if (i == current_jump_end) {
                 number_of_jumps++;
                 current_jump_end = maxReach;
             }

        }
        return number_of_jumps;

    }
};
