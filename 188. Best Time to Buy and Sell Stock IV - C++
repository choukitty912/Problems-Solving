/*
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most k transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

Example 1:

Input: [2,4,1], k = 2
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: [3,2,6,5,0,3], k = 2
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4.
             Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
*/
class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int size = prices.size();
        if (size <=1) return 0;  
        if (k > prices.size()) return maxProfit_sell(prices);
        vector<vector<int>> g_max(size, vector<int>(k+1,0));
        vector<vector<int>> l_max(size, vector<int>(k+1,0));
        
        for (int i = 1 ; i < size; i++ ) {
            int diff = prices[i] - prices[i-1];
            for (int j = 1 ; j < k+1; j++ ) {
                l_max[i][j] = max(g_max[i-1][j-1] + max(0,diff), l_max[i-1][j]+diff);
                g_max[i][j] = max(g_max[i-1][j], l_max[i][j]);
            }
            
        }
        
        return g_max[size-1][k];
        
    }
    //can do as many transactions as want, because # of transaction > days
    int maxProfit_sell (vector<int> & prices) {
        int res = 0;
        for (int i = 1; i< prices.size(); i++) {
            res += max(0, prices[i]-prices[i-1] );
        }
        return res;
    }
};
