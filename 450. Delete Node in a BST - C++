/*Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.
Note: Time complexity should be O(height of tree).
*/
/*=================recursive =================*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if (!root) return NULL;
        
        if (key < root->val) {            
            root->left = deleteNode(root->left, key);
        }else if (key > root->val) {
            root->right = deleteNode(root->right, key);
        }else { //key == root->val
            if (!root->left || !root->right)  {
                root = root->right ? root->right : root->left;
            }else {
                TreeNode* temp;
                temp = root->right;
                while (temp->left) {
                     temp = temp->left;
                }
               root->val = temp->val;
               root->right = deleteNode(root->right, temp->val);
            }
        }
        return root;
    }
};





