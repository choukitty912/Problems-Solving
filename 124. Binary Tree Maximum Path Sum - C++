/*
Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.

Example 1:

Input: [1,2,3]

       1
      / \
     2   3

Output: 6
Example 2:

Input: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

Output: 42
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int maxPathSum(TreeNode* root) {
        int res = INT_MIN;
        maxPathSum_helper(root, &res);
        return res;
    }
    
private:
    int maxPathSum_helper(TreeNode * root, int *res) {
        if (!root) return 0;
        int l_value = 0, r_value = 0, cur_max = INT_MIN;
        if (!root->left && !root->right) {
            *res = max(*res, root->val);
            return root->val;
        }
        if (root->left) {
            l_value = maxPathSum_helper(root->left, res); 
        } 
        if (root->right) {
            r_value = maxPathSum_helper(root->right, res); 
        }
        
        cur_max =max(max(r_value, l_value) + root->val, root->val);
        
        
        *res = max(*res, max(cur_max, r_value+l_value+root->val));
        
        
        return cur_max;
        
        
        
    }
};
