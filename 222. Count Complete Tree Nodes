/*
Given the root of a complete binary tree, return the number of the nodes in the tree.

According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

Design an algorithm that runs in less than O(n) time complexity.

 

Example 1:


Input: root = [1,2,3,4,5,6]
Output: 6
Example 2:

Input: root = []
Output: 0
Example 3:

Input: root = [1]
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [0, 5 * 104].
0 <= Node.val <= 5 * 104
The tree is guaranteed to be complete.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int countNodes(TreeNode* root) {
       if (!root) return 0;

       queue <TreeNode*> q;

       q.push(root);
       int res = 1;
       while (!q.empty()) {
           TreeNode *current = q.front();
           q.pop();
           if (current->left) {
               q.push(current->left);
               res++;
           }
           if(current->right) {
               q.push(current->right);
               res++;
           }

       }
       return res;

    }

};
class Solution {
public:
int countNodes(TreeNode* root) {
    if (root == nullptr) {
        return 0; // An empty tree has 0 nodes.
    }

    int leftHeight = 0, rightHeight = 0;
    TreeNode* leftNode = root, * rightNode = root;

    // Calculate the height of the left and right subtrees
    while (leftNode) {
        leftHeight++;
        leftNode = leftNode->left;
    }
    while (rightNode) {
        rightHeight++;
        rightNode = rightNode->right;
    }

    // If the height of the left subtree is equal to the height of the right subtree,
    // it means the left subtree is a perfect binary tree.
    if (leftHeight == rightHeight) {
        return (1 << leftHeight) - 1; // Total nodes = 2^height - 1
    } else {
        // Otherwise, recursively count the nodes in the left and right subtrees
        return 1 + countNodes(root->left) + countNodes(root->right);
    }
}

};
